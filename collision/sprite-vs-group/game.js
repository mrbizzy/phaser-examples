// Generated by LiveScript 1.2.0
(function(){
  'use strict';
  var game, sprite, allVeggies, collisionHandler;
  game = new Phaser.Game(800, 600, Phaser.CANVAS, '', {
    preload: preload,
    create: create,
    update: update,
    render: render
  });
  function preload(){
    game.load.image('phaser', '../../../phaser/examples/assets/sprites/phaser-dude.png');
    return game.load.spritesheet('veggies', '../../../phaser/examples/assets/sprites/fruitnveg32wh37.png', 32, 32);
  }
  function create(){
    var i$, i, vegetable, chili, results$ = [];
    game.stage.backgroundColor = '#222222';
    sprite = game.add.sprite(32, 200, 'phaser');
    sprite.name = 'phaser-dude';
    allVeggies = game.add.group();
    for (i$ = 0; i$ < 50; ++i$) {
      i = i$;
      vegetable = allVeggies.create(100 + Math.random() * 700, game.world.randomY, 'veggies', game.rnd.integerInRange(0, 36));
      vegetable.name = "veg" + i;
      vegetable.body.immovable = true;
    }
    for (i$ = 0; i$ < 20; ++i$) {
      i = i$;
      chili = allVeggies.create(100 + Math.random() * 700, game.world.randomY, 'veggies', 17);
      chili.name = "chili" + i;
      chili.body.immovable = true;
      results$.push(game.input.keyboard.addKeyCapture(Phaser.Keyboard.LEFT, Phaser.Keyboard.RIGHT, Phaser.Keyboard.UP, Phaser.Keyboard.DOWN));
    }
    return results$;
  }
  function update(){
    sprite.body.velocity.x = 0;
    sprite.body.velocity.y = 0;
    if (game.input.keyboard.isDown(Phaser.Keyboard.LEFT)) {
      sprite.body.velocity.x = -200;
    } else if (game.input.keyboard.isDown(Phaser.Keyboard.RIGHT)) {
      sprite.body.velocity.x = 200;
    }
    if (game.input.keyboard.isDown(Phaser.Keyboard.UP)) {
      sprite.body.velocity.y = -200;
    } else if (game.input.keyboard.isDown(Phaser.Keyboard.DOWN)) {
      sprite.body.velocity.y = 200;
    }
    return game.physics.collide(sprite, allVeggies, collisionHandler, null, this);
  }
  collisionHandler = function(obj1, obj2){
    console.log('Hit', obj2.name);
    if (obj2.frame === 17) {
      return obj2.kill();
    }
  };
  function render(){
    return game.debug.renderQuadTree(game.physics.quadTree);
  }
}).call(this);
